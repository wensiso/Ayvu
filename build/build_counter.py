import re
import os.path

def readDescriptor():
    f = open("../bar-descriptor.xml", "r")
    data = f.read()
    f.close()
    return data

def updateBuildId():
    data = readDescriptor()
    m = re.search(r"<buildId>(\d+)</buildId>", data)
    build_id = int(m.group(1))
    print("CURRENT BUILD ID: {0}".format(build_id))
    data = data.replace("<buildId>" + str(build_id) + "</buildId>", "<buildId>" + str(build_id+1) + "</buildId>")

    m = re.search(r"<versionNumber>(\d+).(\d+).(\d+)</versionNumber>", data)
    major = int(m.group(1))
    minor = int(m.group(2))
    maintenance = int(m.group(3))
    print("CURRENT VERSION:{0}.{1}.{2}".format(major, minor, maintenance))

    f = open("../bar-descriptor.xml", "w")
    f.write(data)
    f.close()

    template = """#ifndef VERSION_H
#define VERSION_H
/*
 * Auto-generated by the build_counter.py script.
 * Any changes made by user WILL BE LOST!
 */

#include <QObject>
#include <bb/cascades/QmlDocument>

#define APPLICATION_VERSION_MAJOR {0}
#define APPLICATION_VERSION_MINOR {1}
#define APPLICATION_VERSION_MAINTENANCE {2}
#define APPLICATION_VERSION_BUILD {3}

class ApplicationInfo: public QObject {{
    Q_OBJECT
public:
    ApplicationInfo(QObject * parent = 0): QObject(parent) {{
    }}
	Q_INVOKABLE QString version() {{
	    return QString("{0}.{1}.{2}.{3}");
	}}
	Q_INVOKABLE QString versionWithoutBuidId() {{
	    return QString("{0}.{1}.{2}");
	}}
	Q_INVOKABLE QString currentPath() {{
        return QString("file://" + QDir::currentPath());
    }}
    Q_INVOKABLE QString rawAssetsPath() {{
        return QString(QDir::currentPath() + "/app/native/assets/");
    }}
    Q_INVOKABLE QString homePath() {{
        return QString("file://" + QDir::homePath());
    }}
    Q_INVOKABLE QString tempPath() {{
        return QString("file://" + QDir::tempPath());
    }}
    static void registerQmlTypes() {{
        qmlRegisterType<ApplicationInfo>("app.info", 1, 0, "ApplicationInfo");
    }}
}};

#endif //VERSION_H
"""
    f = open("../src/applicationinfo.hpp", "w")
    f.write(template.format(major, minor, maintenance, build_id))
    f.close()

if __name__ == "__main__":
    updateBuildId()